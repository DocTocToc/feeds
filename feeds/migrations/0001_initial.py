# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-06 08:16
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Short descriptive name for this category.', max_length=200)),
                ('slug', models.SlugField(help_text='Short descriptive unique name for use in urls.', max_length=255, unique=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.Category')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Enclosure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('href', models.URLField()),
                ('length', models.BigIntegerField()),
                ('enclosure_type', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_url', models.URLField(unique=True, verbose_name='feed url')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='short_name')),
                ('slug', models.SlugField(blank=True, help_text='Short descriptive unique name for use in urls.', max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='If disabled, this feed will not be further updated.', verbose_name='is active')),
                ('errors', models.IntegerField(default=0, help_text="\n                    Remember errors for a feed, and don't try again if a\n                    threshold is met\n                    ", verbose_name='Has errors')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='title')),
                ('link', models.URLField(blank=True, verbose_name='link')),
                ('logo', models.URLField(blank=True, null=True, verbose_name='logo')),
                ('tagline', models.TextField(blank=True, help_text='Phrase or sentence describing the channel.', verbose_name='description')),
                ('language', models.CharField(blank=True, max_length=8, verbose_name='language')),
                ('copyright', models.CharField(blank=True, max_length=64, verbose_name='copyright')),
                ('author', models.CharField(blank=True, max_length=64, verbose_name='managingEditor')),
                ('webmaster', models.CharField(blank=True, max_length=64, verbose_name='webmaster')),
                ('pubDate', models.DateTimeField(blank=True, null=True, verbose_name='pubDate')),
                ('last_modified', models.DateTimeField(blank=True, null=True, verbose_name='lastBuildDate')),
                ('ttl', models.IntegerField(default=60, verbose_name="\n          TTL stands for time to live.\n          It's a number of minutes that indicates how long a\n          channel can be cached before refreshing from the source.\n          ")),
                ('image_title', models.CharField(blank=True, max_length=200, verbose_name='image_title')),
                ('image_link', models.URLField(blank=True, verbose_name='image_link')),
                ('image_url', models.URLField(blank=True, verbose_name='image_url')),
                ('etag', models.CharField(blank=True, max_length=50, verbose_name='etag')),
                ('last_checked', models.DateTimeField(auto_now=True, null=True, verbose_name='last checked')),
                ('check_interval', models.IntegerField(default=5, verbose_name='Interval in Minutes between checks.')),
                ('ignore_ca', models.BooleanField(default=True, verbose_name='Indicates whether CA for this certificate should be ignored')),
                ('announce_posts', models.BooleanField(default=False)),
                ('category', models.ManyToManyField(blank=True, related_name='category_feeds', to='feeds.Category')),
            ],
            options={
                'verbose_name': 'feed',
                'verbose_name_plural': 'feeds',
                'ordering': ('name', 'feed_url'),
                'permissions': (('can_refresh_feed', 'Can refresh feed'), ('can_subscribe_feed', 'Can subscribe to feed'), ('can_backup_feed', 'Can backup feeds')),
            },
        ),
        migrations.CreateModel(
            name='FeedEntryStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected', models.DateTimeField(auto_now_add=True)),
                ('entry_new', models.IntegerField(default=0)),
                ('entry_same', models.IntegerField(default=0)),
                ('entry_updated', models.IntegerField(default=0)),
                ('entry_err', models.IntegerField(default=0)),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feeds.Feed')),
            ],
        ),
        migrations.CreateModel(
            name='FeedPostCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_new', models.IntegerField(default=0)),
                ('entry_updated', models.IntegerField(default=0)),
                ('entry_same', models.IntegerField(default=0)),
                ('entry_err', models.IntegerField(default=0)),
                ('created', models.IntegerField()),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feeds.Feed', verbose_name='feed')),
            ],
        ),
        migrations.CreateModel(
            name='FeedStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected', models.DateTimeField(auto_now_add=True)),
                ('feed_ok', models.IntegerField(default=0)),
                ('feed_same', models.IntegerField(default=0)),
                ('feed_errparse', models.IntegerField(default=0)),
                ('feed_errhttp', models.IntegerField(default=0)),
                ('feed_errexc', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='FileModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.FileField(upload_to='', verbose_name='data')),
            ],
        ),
        migrations.CreateModel(
            name='Options',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_initially_displayed', models.IntegerField(default=10, help_text='Paginate by')),
                ('number_additionally_displayed', models.IntegerField(default=5, help_text='ToDo')),
                ('max_entries_saved', models.IntegerField(default=100)),
            ],
            options={
                'verbose_name_plural': 'options',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('link', models.URLField(verbose_name='link')),
                ('content', models.TextField(blank=True, verbose_name='description')),
                ('author', models.CharField(blank=True, max_length=50, verbose_name='author')),
                ('author_email', models.EmailField(blank=True, max_length=254, verbose_name='author email')),
                ('comments', models.URLField(blank=True, verbose_name='comments')),
                ('guid', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='guid')),
                ('published', models.DateTimeField(verbose_name='pubDate')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='last_updated')),
                ('tweets', models.IntegerField(default=0)),
                ('blogs', models.IntegerField(default=0)),
                ('plus1', models.IntegerField(default=0)),
                ('likes', models.IntegerField(default=0)),
                ('linkedin', models.IntegerField(default=0)),
                ('shares', models.IntegerField(default=0)),
                ('pageviews', models.IntegerField(default=0)),
                ('score', models.IntegerField(default=0)),
                ('updated_social', models.BooleanField(default=False)),
                ('was_announced', models.BooleanField(default=False)),
                ('was_recommended', models.BooleanField(default=False)),
                ('has_errors', models.BooleanField(default=True)),
                ('categories', models.ManyToManyField(blank=True, related_name='categories', to='feeds.Category')),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='feeds.Feed', verbose_name='feed')),
            ],
        ),
        migrations.CreateModel(
            name='PostReadCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feeds.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feed_subscription', to='feeds.Feed', verbose_name='Feed Subscription')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscription', to='feeds.Options', verbose_name='User Subscription')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='name')),
                ('slug', models.SlugField(help_text='Short descriptive unique name for use in urls.', max_length=255, unique=True)),
                ('relevant', models.BooleanField(default=False)),
                ('touched', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TaggedPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feeds.Post', verbose_name='post')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='feeds.Tag', verbose_name='tag')),
            ],
            options={
                'verbose_name': 'tagged item',
                'verbose_name_plural': 'tagged node',
            },
        ),
        migrations.CreateModel(
            name='WebSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website_url', models.URLField(help_text='URL of the Website.', unique=True)),
                ('slug', models.SlugField(null=True)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(related_name='tag_posts', through='feeds.TaggedPost', to='feeds.Tag'),
        ),
        migrations.AddField(
            model_name='options',
            name='subscriptions',
            field=models.ManyToManyField(through='feeds.Subscription', to='feeds.Feed'),
        ),
        migrations.AddField(
            model_name='options',
            name='user',
            field=models.ForeignKey(help_text='User', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='feed',
            name='website',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='feeds.WebSite'),
        ),
        migrations.AddField(
            model_name='enclosure',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enclosure', to='feeds.Post'),
        ),
        migrations.AlterUniqueTogether(
            name='taggedpost',
            unique_together=set([('tag', 'post')]),
        ),
        migrations.AlterUniqueTogether(
            name='subscription',
            unique_together=set([('user', 'feed')]),
        ),
    ]
